/*
 * SEAS - Surveillance de l'Environnement Assistée par Satellites
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 * Contacts:
 *     FRANCE: Surveillance de l'Environnement Assistée par Satellite
 *             Institut de Recherche pour le Développement
 *             mailto:seasnet@teledetection.fr
 *
 *     CANADA: Observatoire du Saint-Laurent
 *             Institut Maurice-Lamontagne
 *             mailto:osl@osl.gc.ca
 */
package net.seas.map.array;

// Divers
import java.util.Iterator;
import java.awt.geom.Point2D;


/**
 * Itérateur balayant les données d'un tableau {@link PointArray}. Cet itérateur est obtenu par
 * un appel à {@link PointArray#iterator}.  Le balayage se fait généralement par des appels aux
 * aux méthodes {@link #nextX} et {@link #nextY}, qui retournent les données sous forme de nombres
 * réels <code>float</code>. Toutefois, ces méthodes <g>doivent toujours</g> être appellées dans
 * cet ordre: {@link #nextX} d'abord, suivit de {@link #nextY}. Tout manquement à cette règle (par
 * exemple appeller {@link #nextX} deux fois de suite) peut produire des résultats erronées.
 *
 * @version 1.0
 * @author Martin Desruisseaux
 */
public abstract class PointIterator implements Iterator<Point2D>, Cloneable
{
    /**
     * Constructeur par défaut.
     */
    protected PointIterator()
    {}

    /**
     * Indique si les méthodes {@link #next}
     * peuvent retourner d'autres données.
     */
    public abstract boolean hasNext();

    /**
     * Retourne la valeur de la longitude courante. Avant d'appeller
     * une seconde fois cette méthode, il faudra <g>obligatoirement</g>
     * avoir appelé {@link #nextY}.
     */
    public abstract float nextX();

    /**
     * Retourne la valeur de la latitude courante, puis avance au point
     * suivant. Chaque appel de cette méthode doit <g>obligatoirement</g>
     * avoir été précédée d'un appel à la méthode {@link #nextX}.
     */
    public abstract float nextY();

    /**
     * Retourne la valeur du point courant dans un objet {@link Point2D},
     * puis avance au point suivant. Cette méthode combine un appel de
     * {@link #nextX} suivit de {@link #nextY}.
     */
    public final Point2D next()
    {return new Point2D.Float(nextX(), nextY());}

    /**
     * Opération non-supportée.
     */
    public final void remove()
    {throw new UnsupportedOperationException();};

    /**
     * Retourne une copie conforme de cet itérateur. Cette
     * copie peut être utile pour balayer une seconde fois
     * les mêmes données à partir du point où se trouve cet
     * itérateur.
     */
    public final PointIterator clone()
    {
        try
        {
            return (PointIterator) super.clone();
        }
        catch (CloneNotSupportedException exception)
        {
            InternalError e=new InternalError(exception.getLocalizedMessage());
            e.initCause(exception);
            throw e;
        }
    }
}
